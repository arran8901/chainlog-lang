on multiIfCondition(X, Y):
  if integer(X), integer(Y), X > Y;
  do assert(gt(X, Y)).

on multiIfKeyword(X, Y):
  if integer(X);
  if integer(Y);
  if X > Y;
  do assert(gt(X, Y)).

on multiIfCombination(X, Y):
  if integer(X), integer(Y);
  if X > Y;
  do assert(gt(X, Y)).


test_multi_condition :-
  mock_msg_ctx(MsgCtx),
  expect_msg(multiIfCondition(5, 4), MsgCtx, [assert(gt(5, 4))]),
  expect_msg_fail(multiIfCondition(atom, 4), MsgCtx, error(match_error(msg_handler), _)),
  expect_msg_fail(multiIfCondition(5, atom), MsgCtx, error(match_error(msg_handler), _)),
  expect_msg_fail(multiIfCondition(3, 4), MsgCtx, error(match_error(msg_handler), _)).

test_multi_keyword :-
  mock_msg_ctx(MsgCtx),
  expect_msg(multiIfKeyword(5, 4), MsgCtx, [assert(gt(5, 4))]),
  expect_msg_fail(multiIfKeyword(atom, 4), MsgCtx, error(match_error(msg_handler), _)),
  expect_msg_fail(multiIfKeyword(5, atom), MsgCtx, error(match_error(msg_handler), _)),
  expect_msg_fail(multiIfKeyword(3, 4), MsgCtx, error(match_error(msg_handler), _)).

test_multi_combination :-
  mock_msg_ctx(MsgCtx),
  expect_msg(multiIfCombination(5, 4), MsgCtx, [assert(gt(5, 4))]),
  expect_msg_fail(multiIfCombination(atom, 4), MsgCtx, error(match_error(msg_handler), _)),
  expect_msg_fail(multiIfCombination(5, atom), MsgCtx, error(match_error(msg_handler), _)),
  expect_msg_fail(multiIfCombination(3, 4), MsgCtx, error(match_error(msg_handler), _)).

